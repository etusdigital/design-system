<?xml version="1.0" encoding="UTF-8"?>
<prompt-tokens>

  <prompt-instructions>
    <instruction>Seu papel: Arquiteto de Design Systems / Product Designer especialista em definição de tokens primitivos.</instruction>
    <instruction>Sua tarefa: Gerar um Product Requirements Document (PRD) em formato Markdown, detalhando a definição dos tokens **primitivos (camada `core`)** para as categorias listadas na Seção 1.</instruction>
    <instruction>Foco: O PRD deve concentrar-se exclusivamente na definição da camada `core` da Arquitetura D para essas categorias, incluindo nomenclatura, escalas, valores e justificativas.</instruction>
    <instruction>Output: O resultado esperado é um documento Markdown completo e bem estruturado, conforme definido na Seção 5.</instruction>
    <instruction>Metodologia Interna: Para definir os tokens `core`, considere internamente as melhores práticas de design systems de referência (Material, Atlassian, etc.), analise os tokens atuais fornecidos (Seção 2) como base para valores (especialmente cores e fontes), e aplique os princípios da Arquitetura D (Seção 4) e o contexto multimarca (Seção 4).</instruction>
    <instruction>Exclusões: Não detalhe governança, fluxos de aprovação, tokens semânticos ou de componentes neste documento.</instruction>
  </prompt-instructions>

  <intro>
    <paragraph>Contexto para Geração de PRD de Tokens Core.</paragraph>
    <paragraph>Este PRD servirá como a base fundamental para todo o sistema de tokens, definindo os valores brutos e imutáveis.</paragraph>
    <paragraph>Placeholders utilizados:
      <list>
        <item>`{{baseTokens}}`: JSON atual com tokens primitivos/base (referência para valores).</item>
        <item>`{{functionalTokens}}`: JSON atual com tokens funcionais/semânticos (contexto geral, menos relevante aqui).</item>
        <item>`{{guia}}`: Diretrizes de nomenclatura ou estruturais adicionais/específicas (opcional).</item>
      </list>
    </paragraph>
  </intro>

  <section title="1) Categorias Core a Serem Definidas">
    <paragraph>Este PRD deve definir os tokens primitivos (`core`) para as seguintes categorias fundamentais:</paragraph>
    <list>
      <item>Colors (Cores)</item>
      <item>Typography (Tipografia - Famílias, Pesos)</item>
      <item>Spacing (Espaçamento)</item>
      <item>Sizing (Dimensionamento - e.g., para containers, ícones)</item>
      <item>Border (Bordas - Larguras, Estilos)</item>
      <item>Shadows (Sombras)</item>
      <item>Opacity (Opacidade)</item>
      <item>Z-index (Índice Z / Camadas)</item>
      <item>Motion (Movimento - Durações, Curvas de Animação - também conhecido como Easing)</item>
      <item>Transitions (Transições - Propriedades relacionadas)</item>
      <item>Breakpoints (Pontos de Interrupção Responsivos)</item>
      <item>Grid (Layout de Grade - e.g., número de colunas, espaçamento/gutter)</item>
    </list>
    <paragraph>O PRD deve ter uma subseção dedicada para cada uma destas categorias dentro da seção principal de definições.</paragraph>
  </section>

  <section title="2) Tokens Atuais (Referência para Valores Base)">
    <paragraph>Analise o JSON `baseTokens` principalmente para extrair valores de referência existentes que devem ser incorporados ou servir de base para as novas escalas `core` (e.g., cores primárias da marca, fontes usadas). O `functionalTokens` serve apenas como contexto geral.</paragraph>
    <json name="currentBaseTokens">
      ```json
        {
    "color": {
      "neutral": {
        "10": {
          "value": "#f8fafb",
          "type": "color"
        },
        "50": {
          "value": "#f4f6f7",
          "type": "color"
        },
        "100": {
          "value": "#e3e7ea",
          "type": "color"
        },
        "200": {
          "value": "#cad2d7",
          "type": "color"
        },
        "300": {
          "value": "#a6b4ba",
          "type": "color"
        },
        "400": {
          "value": "#7a8d96",
          "type": "color"
        },
        "500": {
          "value": "#5f717b",
          "type": "color"
        },
        "600": {
          "value": "#465058",
          "type": "color"
        },
        "700": {
          "value": "#3e464c",
          "type": "color"
        },
        "800": {
          "value": "#1b1f22",
          "type": "color"
        },
        "900": {
          "value": "#101214",
          "type": "color"
        },
        "950": {
          "value": "#050505",
          "type": "color"
        },
        "05": {
          "value": "#fbfcfd",
          "type": "color"
        },
        "00": {
          "value": "#ffffff",
          "type": "color"
        }
      },
      "etus-green": {
        "50": {
          "value": "#effaf4",
          "type": "color"
        },
        "100": {
          "value": "#d9f2e4",
          "type": "color"
        },
        "200": {
          "value": "#b6e4cd",
          "type": "color"
        },
        "300": {
          "value": "#86cfae",
          "type": "color"
        },
        "400": {
          "value": "#63ba96",
          "type": "color"
        },
        "500": {
          "value": "#329771",
          "type": "color"
        },
        "600": {
          "value": "#22795a",
          "type": "color"
        },
        "700": {
          "value": "#1b614a",
          "type": "color"
        },
        "800": {
          "value": "#184d3b",
          "type": "color"
        },
        "900": {
          "value": "#144032",
          "type": "color"
        },
        "950": {
          "value": "#0a241d",
          "type": "color"
        }
      },
      "green": {
        "50": {
          "value": "#effef5",
          "type": "color"
        },
        "100": {
          "value": "#e6f9ef",
          "type": "color"
        },
        "200": {
          "value": "#bff1d8",
          "type": "color"
        },
        "300": {
          "value": "#8ce2b9",
          "type": "color"
        },
        "400": {
          "value": "#4fcc92",
          "type": "color"
        },
        "500": {
          "value": "#0fb75c",
          "type": "color"
        },
        "600": {
          "value": "#0a9e50",
          "type": "color"
        },
        "700": {
          "value": "#078541",
          "type": "color"
        },
        "800": {
          "value": "#056a33",
          "type": "color"
        },
        "900": {
          "value": "#105732",
          "type": "color"
        },
        "950": {
          "value": "#03301a",
          "type": "color"
        }
      },
      "yellow": {
        "50": {
          "value": "#ffffea",
          "type": "color"
        },
        "100": {
          "value": "#fff5cc",
          "type": "color"
        },
        "200": {
          "value": "#ffe999",
          "type": "color"
        },
        "300": {
          "value": "#ffdd66",
          "type": "color"
        },
        "400": {
          "value": "#ffd133",
          "type": "color"
        },
        "500": {
          "value": "#ffc500",
          "type": "color"
        },
        "600": {
          "value": "#dba700",
          "type": "color"
        },
        "700": {
          "value": "#b78a00",
          "type": "color"
        },
        "800": {
          "value": "#936d00",
          "type": "color"
        },
        "900": {
          "value": "#7c440b",
          "type": "color"
        },
        "950": {
          "value": "#482300",
          "type": "color"
        }
      },
      "red": {
        "50": {
          "value": "#fef2f2",
          "type": "color"
        },
        "100": {
          "value": "#fde8e8",
          "type": "color"
        },
        "200": {
          "value": "#fab8b8",
          "type": "color"
        },
        "300": {
          "value": "#f58a8a",
          "type": "color"
        },
        "400": {
          "value": "#f25c5c",
          "type": "color"
        },
        "500": {
          "value": "#f03232",
          "type": "color"
        },
        "600": {
          "value": "#d12b2b",
          "type": "color"
        },
        "700": {
          "value": "#b22424",
          "type": "color"
        },
        "800": {
          "value": "#931d1d",
          "type": "color"
        },
        "900": {
          "value": "#801c1c",
          "type": "color"
        },
        "950": {
          "value": "#460909",
          "type": "color"
        }
      },
      "purple": {
        "50": {
          "value": "#f2eeff",
          "type": "color"
        },
        "100": {
          "value": "#e1dbff",
          "type": "color"
        },
        "200": {
          "value": "#c7bbff",
          "type": "color"
        },
        "300": {
          "value": "#9072ff",
          "type": "color"
        },
        "400": {
          "value": "#6149cc",
          "type": "color"
        },
        "500": {
          "value": "#523bbb",
          "type": "color"
        },
        "600": {
          "value": "#45329e",
          "type": "color"
        },
        "700": {
          "value": "#362780",
          "type": "color"
        },
        "800": {
          "value": "#2b1d63",
          "type": "color"
        },
        "900": {
          "value": "#1f144c",
          "type": "color"
        },
        "950": {
          "value": "#120a2e",
          "type": "color"
        }
      },
      "sky": {
        "50": {
          "value": "#f0f9ff",
          "type": "color"
        },
        "100": {
          "value": "#e0f2fe",
          "type": "color"
        },
        "200": {
          "value": "#bae6fd",
          "type": "color"
        },
        "300": {
          "value": "#7cd3fd",
          "type": "color"
        },
        "400": {
          "value": "#50c6fa",
          "type": "color"
        },
        "500": {
          "value": "#0da6ea",
          "type": "color"
        },
        "600": {
          "value": "#0184c8",
          "type": "color"
        },
        "700": {
          "value": "#0269a2",
          "type": "color"
        },
        "800": {
          "value": "#065986",
          "type": "color"
        },
        "900": {
          "value": "#0b4a6f",
          "type": "color"
        },
        "950": {
          "value": "#082f49",
          "type": "color"
        }
      },
      "brius-blue": {
        "50": {
          "value": "#e7f0ff",
          "type": "color"
        },
        "100": {
          "value": "#d0e0ff",
          "type": "color"
        },
        "200": {
          "value": "#b8d0ff",
          "type": "color"
        },
        "300": {
          "value": "#90b1ff",
          "type": "color"
        },
        "400": {
          "value": "#3265ff",
          "type": "color"
        },
        "500": {
          "value": "#115be2",
          "type": "color"
        },
        "600": {
          "value": "#004ed7",
          "type": "color"
        },
        "700": {
          "value": "#0041b8",
          "type": "color"
        },
        "800": {
          "value": "#003298",
          "type": "color"
        },
        "900": {
          "value": "#002070",
          "type": "color"
        },
        "950": {
          "value": "#001040",
          "type": "color"
        }
      },
      "evolution-green": {
        "50": {
          "value": "#edfff8",
          "type": "color"
        },
        "100": {
          "value": "#d5fff1",
          "type": "color"
        },
        "200": {
          "value": "#aeffe3",
          "type": "color"
        },
        "300": {
          "value": "#70ffcf",
          "type": "color"
        },
        "400": {
          "value": "#2bfdb4",
          "type": "color"
        },
        "500": {
          "value": "#00ffa7",
          "type": "color"
        },
        "600": {
          "value": "#00c079",
          "type": "color"
        },
        "700": {
          "value": "#009662",
          "type": "color"
        },
        "800": {
          "value": "#067550",
          "type": "color"
        },
        "900": {
          "value": "#076044",
          "type": "color"
        },
        "950": {
          "value": "#003725",
          "type": "color"
        }
      }
    },
    "font": {
      "family": { 
          "value": "Poppins",
          "type": "text"
      },
      "size": {
        "xs": {
          "value": 12,
          "type": "dimension"
        },
        "sm": {
          "value": 14,
          "type": "dimension"
        },
        "base": {
          "value": 16,
          "type": "dimension"
        },
        "lg": {
          "value": 18,
          "type": "dimension"
        },
        "xl": {
          "value": 20,
          "type": "dimension"
        },
        "2xl": {
          "value": 24,
          "type": "dimension"
        },
        "3xl": {
          "value": 30,
          "type": "dimension"
        },
        "4xl": {
          "value": 32,
          "type": "dimension"
        },
        "5xl": {
          "value": 48,
          "type": "dimension"
        },
        "6xl": {
          "value": 60,
          "type": "dimension"
        },
        "7xl": {
          "value": 72,
          "type": "dimension"
        },
        "8xl": {
          "value": 96,
          "type": "dimension"
        },
        "9xl": {
          "value": 128,
          "type": "dimension"
        },
        "xxs": {
          "value": 10,
          "type": "dimension"
        }
      },
      "weight": {
        "thin": {
          "value": 100,
          "type": "number"
        },
        "extralight": {
          "value": 200,
          "type": "number"
        },
        "light": {
          "value": 300,
          "type": "number"
        },
        "normal": {
          "value": 400,
          "type": "number"
        },
        "medium": {
          "value": 500,
          "type": "number"
        },
        "semibold": {
          "value": 600,
          "type": "number"
        },
        "bold": {
          "value": 700,
          "type": "number"
        },
        "extrabold": {
          "value": 800,
          "type": "number"
        },
        "black": {
          "value": 900,
          "type": "number"
        }
      }
    },
    "spacing": {
      "0": {
        "value": 0,
        "type": "dimension"
      },
      "4": {
        "value": 4,
        "type": "dimension"
      },
      "8": {
        "value": 8,
        "type": "dimension"
      },
      "12": {
        "value": 12,
        "type": "dimension"
      },
      "16": {
        "value": 16,
        "type": "dimension"
      },
      "20": {
        "value": 20,
        "type": "dimension"
      },
      "24": {
        "value": 24,
        "type": "dimension"
      },
      "32": {
        "value": 32,
        "type": "dimension"
      },
      "40": {
        "value": 48,
        "type": "dimension"
      },
      "56": {
        "value": 56,
        "type": "dimension"
      },
      "64": {
        "value": 64,
        "type": "dimension"
      },
      "80": {
        "value": 80,
        "type": "dimension"
      },
      "96": {
        "value": 96,
        "type": "dimension"
      },
      "112": {
        "value": 112,
        "type": "dimension"
      },
      "128": {
        "value": 128,
        "type": "dimension"
      },
      "144": {
        "value": 144,
        "type": "dimension"
      },
      "160": {
        "value": 160,
        "type": "dimension"
      },
      "176": {
        "value": 176,
        "type": "dimension"
      },
      "192": {
        "value": 192,
        "type": "dimension"
      },
      "208": {
        "value": 208,
        "type": "dimension"
      },
      "224": {
        "value": 224,
        "type": "dimension"
      },
      "240": {
        "value": 240,
        "type": "dimension"
      },
      "256": {
        "value": 256,
        "type": "dimension"
      },
      "288": {
        "value": 288,
        "type": "dimension"
      },
      "320": {
        "value": 320,
        "type": "dimension"
      },
      "384": {
        "value": 384,
        "type": "dimension"
      }
    },
    "border": {
      "border-width": {
        "0": {
          "value": 0,
          "type": "dimension"
        },
        "1": {
          "value": 1,
          "type": "dimension"
        },
        "2": {
          "value": 2,
          "type": "dimension"
        },
        "4": {
          "value": 4,
          "type": "dimension"
        },
        "8": {
          "value": 8,
          "type": "dimension"
        }
      },
      "border-radius": {
        "none": {
          "value": 0,
          "type": "dimension"
        },
        "sm": {
          "value": 2,
          "type": "dimension"
        },
        "default": {
          "value": 4,
          "type": "dimension"
        },
        "md": {
          "value": 6,
          "type": "dimension"
        },
        "lg": {
          "value": 8,
          "type": "dimension"
        },
        "xl": {
          "value": 12,
          "type": "dimension"
        },
        "2xl": {
          "value": 16,
          "type": "dimension"
        },
        "3xl": {
          "value": 24,
          "type": "dimension"
        },
        "full": {
          "value": 9999,
          "type": "dimension"
        }
      }
    }
  }
      ```
    </json>
    <json name="currentFunctionalTokens">
      ```json
      {
    "neutral": {
      "background": {
        "default": {
          "value": "{color.neutral.05}",
          "type": "color"
        },
        "emphasis": {
          "value": "{color.neutral.00}",
          "type": "color"
        },
        "negative": {
          "value": "{color.neutral.800}",
          "type": "color"
        }
      },
      "surface": {
        "default": {
          "value": "{color.neutral.00}",
          "type": "color"
        },
        "highlight": {
          "value": "{color.neutral.50}",
          "type": "color"
        },
        "hover": {
          "value": "{color.neutral.50}",
          "type": "color"
        },
        "disabled": {
          "value": "{color.neutral.100}",
          "type": "color"
        }
      },
      "interaction": {
        "default": {
          "value": "{color.neutral.600}",
          "type": "color"
        },
        "hover": {
          "value": "{color.neutral.700}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.neutral.800}",
          "type": "color"
        },
        "disabled": {
          "value": "{color.neutral.400}",
          "type": "color"
        }
      },
      "foreground": {
        "disabled": {
          "value": "{color.neutral.400}",
          "type": "color"
        },
        "low": {
          "value": "{color.neutral.500}",
          "type": "color"
        },
        "high": {
          "value": "{color.neutral.800}",
          "type": "color"
        },
        "negative": {
          "value": "{color.neutral.00}",
          "type": "color"
        }
      },
      "border": {
        "default": {
          "value": "{color.neutral.100}",
          "type": "color"
        },
        "hover": {
          "value": "{color.neutral.300}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.neutral.400}",
          "type": "color"
        },
        "disabled": {
          "value": "{color.neutral.200}",
          "type": "color"
        },
        "selected": {
          "value": "{color.neutral.200}",
          "type": "color"
        }
      }
    },
    "primary": {
      "surface": {
        "default": {
          "value": "{color.etus-green.50}",
          "type": "color"
        },
        "highlight": {
          "value": "{color.etus-green.200}",
          "type": "color"
        },
        "hover": {
          "value": "{color.etus-green.100}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.etus-green.300}",
          "type": "color"
        }
      },
      "interaction": {
        "default": {
          "value": "{color.etus-green.500}",
          "type": "color"
        },
        "hover": {
          "value": "{color.etus-green.600}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.etus-green.700}",
          "type": "color"
        },
        "selected": {
          "value": "{color.etus-green.700}",
          "type": "color"
        }
      },
      "border": {
        "default": {
          "value": "{color.etus-green.500}",
          "type": "color"
        },
        "hover": {
          "value": "{color.etus-green.700}",
          "type": "color"
        },
        "selected": {
          "value": "{color.etus-green.800}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.etus-green.900}",
          "type": "color"
        }
      },
      "foreground": {
        "disabled": {
          "value": "{color.etus-green.300}",
          "type": "color"
        },
        "high": {
          "value": "{color.etus-green.800}",
          "type": "color"
        },
        "low": {
          "value": "{color.etus-green.700}",
          "type": "color"
        }
      }
    },
    "informative": {
      "surface": {
        "default": {
          "value": "{color.sky.100}",
          "type": "color"
        },
        "highlight": {
          "value": "{color.sky.200}",
          "type": "color"
        },
        "hover": {
          "value": "{color.sky.300}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.sky.400}",
          "type": "color"
        }
      },
      "interaction": {
        "default": {
          "value": "{color.sky.500}",
          "type": "color"
        },
        "hover": {
          "value": "{color.sky.700}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.sky.900}",
          "type": "color"
        },
        "selected": {
          "value": "{color.sky.600}",
          "type": "color"
        }
      },
      "border": {
        "default": {
          "value": "{color.sky.600}",
          "type": "color"
        },
        "hover": {
          "value": "{color.sky.700}",
          "type": "color"
        },
        "selected": {
          "value": "{color.sky.800}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.sky.900}",
          "type": "color"
        }
      },
      "foreground": {
        "disabled": {
          "value": "{color.sky.300}",
          "type": "color"
        },
        "low": {
          "value": "{color.sky.700}",
          "type": "color"
        },
        "high": {
          "value": "{color.sky.800}",
          "type": "color"
        }
      }
    },
    "success": {
      "surface": {
        "default": {
          "value": "{color.green.50}",
          "type": "color"
        },
        "highlight": {
          "value": "{color.green.200}",
          "type": "color"
        },
        "hover": {
          "value": "{color.green.200}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.green.300}",
          "type": "color"
        }
      },
      "interaction": {
        "default": {
          "value": "{color.green.600}",
          "type": "color"
        },
        "hover": {
          "value": "{color.green.700}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.evolution-green.900}",
          "type": "color"
        },
        "selected": {
          "value": "{color.etus-green.950}",
          "type": "color"
        }
      },
      "border": {
        "default": {
          "value": "{color.green.500}",
          "type": "color"
        },
        "hover": {
          "value": "{color.green.700}",
          "type": "color"
        },
        "selected": {
          "value": "{color.green.800}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.green.900}",
          "type": "color"
        }
      },
      "foreground": {
        "disabled": {
          "value": "{color.green.400}",
          "type": "color"
        },
        "low": {
          "value": "{color.green.700}",
          "type": "color"
        },
        "high": {
          "value": "{color.green.800}",
          "type": "color"
        }
      }
    },
    "warning": {
      "surface": {
        "default": {
          "value": "{color.yellow.50}",
          "type": "color"
        },
        "highlight": {
          "value": "{color.yellow.100}",
          "type": "color"
        },
        "hover": {
          "value": "{color.yellow.200}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.yellow.300}",
          "type": "color"
        }
      },
      "interaction": {
        "default": {
          "value": "{color.yellow.600}",
          "type": "color"
        },
        "hover": {
          "value": "{color.yellow.700}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.yellow.800}",
          "type": "color"
        },
        "selected": {
          "value": "{color.yellow.800}",
          "type": "color"
        }
      },
      "border": {
        "default": {
          "value": "{color.yellow.500}",
          "type": "color"
        },
        "hover": {
          "value": "{color.yellow.700}",
          "type": "color"
        },
        "selected": {
          "value": "{color.yellow.800}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.yellow.900}",
          "type": "color"
        }
      },
      "foreground": {
        "disabled": {
          "value": "{color.yellow.300}",
          "type": "color"
        },
        "low": {
          "value": "{color.yellow.800}",
          "type": "color"
        },
        "high": {
          "value": "{color.yellow.900}",
          "type": "color"
        }
      }
    },
    "danger": {
      "surface": {
        "default": {
          "value": "{color.red.50}",
          "type": "color"
        },
        "highlight": {
          "value": "{color.red.200}",
          "type": "color"
        },
        "hover": {
          "value": "{color.red.100}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.red.300}",
          "type": "color"
        }
      },
      "interaction": {
        "default": {
          "value": "{color.red.500}",
          "type": "color"
        },
        "hover": {
          "value": "{color.red.700}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.red.900}",
          "type": "color"
        },
        "selected": {
          "value": "{color.red.600}",
          "type": "color"
        }
      },
      "border": {
        "default": {
          "value": "{color.red.500}",
          "type": "color"
        },
        "hover": {
          "value": "{color.red.700}",
          "type": "color"
        },
        "selected": {
          "value": "{color.red.800}",
          "type": "color"
        },
        "pressed": {
          "value": "{color.red.900}",
          "type": "color"
        }
      },
      "foreground": {
        "disabled": {
          "value": "{color.red.400}",
          "type": "color"
        },
        "low": {
          "value": "{color.red.700}",
          "type": "color"
        },
        "high": {
          "value": "{color.red.900}",
          "type": "color"
        }
      }
    }
  }
  ```
    </json>
  </section>

  <section title="3) Fundamentos: Camada Core na Arquitetura D">
    <paragraph>Relembre os princípios da camada `core` na Arquitetura D:</paragraph>
    <list>
      <item><bold>Valores Primitivos:</bold> Contém os valores atômicos e imutáveis (e.g., hex colors, px values, font weights).</item>
      <item><bold>Nomenclatura Literal:</bold> Os nomes devem ser descritivos do valor em si, não do seu uso (e.g., `core.color.blue.500`, `core.size.spacing.100`, `core.typography.font.weight.bold`). Evitar nomes semânticos nesta camada.</item>
      <item><bold>Escalabilidade:</bold> Definir escalas consistentes (e.g., numérica para cores/espaçamento, T-shirt sizing S/M/L para sizing/breakpoints onde aplicável).</item>
      <item><bold>Referência Base:</bold> Servem como a fonte para tokens `semantic`, `brands`, e `components`.</item>
    </list>
    <paragraph>Diretrizes adicionais de nomenclatura ou estrutura para a camada `core`:</paragraph>
    <guia>
```markdown
# Guia de Nomenclatura de Tokens para Múltiplas Marcas

> **Versão:** 1.3.0  
> **Data:** 27/04/2025  
> **Autores:** Equipe de Design & Front-end  
> **Escopo:** Padronizar nomenclatura e organização de Design Tokens para múltiplas marcas (**ETUS**, **Brius**, **Evolution** e futuras) em arquivos JSON, CSS Custom Properties e módulos TypeScript.

---

## Sumário

1. [Introdução](#1-introdução)  
2. [Contexto Multimarca (ETUS, Brius, Evolution)](#2-contexto-multimarca-etus-brius-evolution)  
3. [Arquitetura de Tokens (Arquitetura D)](#3-arquitetura-de-tokens-arquitetura-d)  
   1. [Visão Geral](#31-visão-geral)  
   2. [core (Primitives)](#32-core-primitives)  
   3. [semantic (Aliases Globais)](#33-semantic-aliases-globais)  
   4. [components (Tokens de Componentes)](#34-components-tokens-de-componentes)  
   5. [themes (Light & Dark)](#35-themes-light--dark)  
   6. [brands (Overrides por Marca)](#36-brands-overrides-por-marca)  
4. [Nomenclatura em Arquivos JSON](#4-nomenclatura-em-arquivos-json)  
   1. [Estrutura de Pastas](#41-estrutura-de-pastas)  
   2. [Exemplos Detalhados](#42-exemplos-detalhados)  
5. [Nomenclatura em CSS Custom Properties](#5-nomenclatura-em-css-custom-properties)  
   1. [Prefixos e Convenções](#51-prefixos-e-convenções)  
   2. [Exemplos de Tema Dinâmico](#52-exemplos-de-tema-dinâmico)  
6. [Nomenclatura em TypeScript](#6-nomenclatura-em-typescript)  
   1. [Enums e Mapped Types](#61-enums-e-mapped-types)  
   2. [Módulos por Marca](#62-módulos-por-marca)  
   3. [Boas Práticas](#63-boas-práticas)  
7. [Regras de “Faça e Não Faça”](#7-regras-de-faça-e-não-faça)  
   1. [Consistência de Marca e Estado](#71-consistência-de-marca-e-estado)  
   2. [Separação de Responsabilidades](#72-separação-de-responsabilidades)  
   3. [Onboarding de Novas Marcas](#73-onboarding-de-novas-marcas)  
8. [Exemplos Práticos de Implementação](#8-exemplos-práticos-de-implementação)  
   1. [Tailwind Config Dinâmico](#81-tailwind-config-dinâmico)  
   2. [Uso em Vue com SCSS](#82-uso-em-vue-com-scss)  
9. [Conclusão e Próximos Passos](#9-conclusão-e-próximos-passos)  
10. [Referências](#10-referências)

---

## 1. Introdução

Este guia expande a documentação anterior de tokens, adaptando-a para uma **realidade multimarca**. Agora, gerenciamos pelo menos três marcas centrais — **ETUS**, **Brius** e **Evolution** — e, no futuro, poderemos incluir outras marcas. A **nomenclatura** e a **organização** dos tokens precisam ser **escaláveis** e **coerentes**.

O objetivo é definir:

1. **Tokens Primitivos** (cores, tipografia etc.) específicos de cada marca.  
2. **Tokens Semânticos** que descrevam papéis funcionais (ex.: `color.background.primary`, `color.feedback.error`) e sirvam como base global.  
3. **Tokens de Componentes** (ex.: `button.primary.background`) com possibilidade de override para cada marca.  
4. Uma forma consistente de **expor** esses tokens em **arquivos JSON**, **variáveis CSS** e **módulos TypeScript**, para que possam ser usados em qualquer front-end (Vue, React, Next.js, etc.).  
5. **Diretrizes** de nomenclatura e exemplos práticos de implementação, incluindo **Light/Dark** e **suporte a múltiplas marcas**.

Com isso, garantimos **manutenção simplificada** (mudar valor em um lugar reflete no sistema todo) e **consistência** (cada equipe entende rapidamente onde encontrar e como usar cada token).

---

## 2. Contexto Multimarca (ETUS, Brius, Evolution)

- **ETUS**: Marca principal, estilo corporativo, paleta de cores fortes (ex.: azuis ou verdes robustos) e tipografia limpa.  
- **Brius**: Focada em Growth Marketing, cores enérgicas (ex.: laranja) e elementos que expressem “agilidade, inovação”.  
- **Evolution**: Segmento de projetos inovadores, minimalista, contrastes fortes, possivelmente roxos/indigos, tipografia mais “tech”.

Embora compartilhem vários **layouts e componentes**, cada marca preserva sua **identidade visual** (paleta, tipografia, mood). Precisamos, portanto, de tokens que:

1. **Sejam globais** (papéis comuns, como cor de erro, sucesso).  
2. **Permitam override** por marca (primitives diferentes, substituições de cor primária, etc.).  
3. **Suportem Light e Dark** (ou outros temas) sem complicar a estrutura.

---

## 3. Arquitetura de Tokens (Arquitetura D)

A estrutura proposta baseia-se na chamada **“Arquitetura D (Dominial)”**: agrupar ativos por **domínio** de responsabilidade, mantendo cada parte (cores brutas, aliases semânticos, tokens de componentes, temas e marcas) em pastas específicas. Isso facilita entender o papel de cada arquivo e isola as mudanças de cada camada do sistema.

### 3.1 Visão Geral

```code
tokens/
├─ core/         # Primitives: valores atômicos puros (cor, tipografia, espaço...)
├─ semantic/     # Aliases semânticos (color.background, color.text, feedback etc.)
├─ components/   # Tokens específicos de cada componente (button, card, etc.)
├─ themes/       # Overrides de tema (light/dark, high-contrast, etc.)
└─ brands/       # Overrides por marca (ETUS, Brius, Evolution, etc.)
```

### 3.2 core (Primitives)

- **Valores brutos** (escala de cor, tipografia, espaçamento etc.), sem significado de uso.  
- Ex.: `core/color.json` com `neutral.50`, `neutral.900`, `green.100`, `green.500`.

### 3.3 semantic (Aliases Globais)

- Mapeiam **papéis funcionais** (ex.: `color.background.primary`, `color.feedback.error`) para valores de `core/` ou `brands/`.  
- Exemplo: `semantic/color.json` contendo:

  ```jsonc
  {
    "color": {
      "background": {
        "primary": { "value": "{brands.etus.primary}" },
        "surface": { "value": "{core.color.neutral.50}" }
      },
      "feedback": {
        "success": { "value": "{core.color.green.500}" },
        "error":   { "value": "{core.color.red.500}" }
      }
    }
  }
  ```

### 3.4 components (Tokens de Componentes)

- Tokens **específicos**: `button.primary.background`, `card.elevation`, etc.  
- Exemplo: `components/button.json`:

  ```jsonc
  {
    "button": {
      "primary": {
        "background": { "value": "{semantic.color.background.primary}" },
        "text":       { "value": "{semantic.color.text.onPrimary}" },
        "radius":     { "value": "{core.border.radius.md}" }
      }
    }
  }
  ```

### 3.5 themes (Light & Dark)

- Diretório para overrides ou valores de **tema** (claro/escuro, high-contrast, etc.).  
- Ex.: `themes/light.json` e `themes/dark.json` podem **ajustar** `color.background.surface`, `color.text.high`, etc.

**Exemplo expandido** (`themes/dark.json`):

```jsonc
{
  "color": {
    "background": {
      "surface": { "value": "{core.color.neutral.900}" },
      "primary": { "value": "{core.color.green.600}" }
    },
    "text": {
      "high": { "value": "{core.color.neutral.0}" }
    }
  }
}
```

Neste caso, o “surface” passa a ser um cinza escuro, e o texto de ênfase fica branco.

### 3.6 brands (Overrides por Marca)

- Cada **marca** (ETUS, Brius, Evolution) tem seu arquivo `json` listando o que muda em relação ao global, principalmente **cores e tipografia** específicas.  
- Exemplo: `brands/etus.json`:

  ```jsonc
  {
    "primary":   { "value": "{core.color.green.500}", "type": "color" },
    "secondary": { "value": "{core.color.green.200}", "type": "color" },
    "onPrimary": { "value": "{core.color.neutral.0}", "type": "color" }
  }
  ```

  Caso a ETUS use verdes como cor principal, associamos `brand.primary` a `green.500`. Para outro caso, `brands/brius.json` pode usar `orange.500` e `orange.200`.

---

## 4. Nomenclatura em Arquivos JSON

### 4.1 Estrutura de Pastas

Refletindo a **Arquitetura D**:

```code
tokens/
├─ core/
│   ├─ color.json
│   ├─ typography.json
│   ├─ spacing.json
│   └─ …
├─ semantic/
│   └─ color.json
├─ components/
│   └─ button.json
├─ themes/
│   ├─ light.json
│   └─ dark.json
└─ brands/
    ├─ etus.json
    ├─ brius.json
    └─ evolution.json
```

Cada subpasta lida com **um domínio**. As ferramentas (como Style Dictionary) lerão e **mesclarão** esses arquivos para gerar as saídas.

### 4.2 Exemplos Detalhados

#### 4.2.1 `core/color.json` (Primitives)

```jsonc
{
  "color": {
    "neutral": {
      "50":  { "value": "#F9FAFB", "type": "color" },
      "100": { "value": "#E3E7EA", "type": "color" },
      "900": { "value": "#111827", "type": "color" }
    },
    "green": {
      "50":  { "value": "#E6F9EF", "type": "color" },
      "500": { "value": "#22C55E", "type": "color" },
      "600": { "value": "#16A34A", "type": "color" }
    },
    "orange": {
      "50":  { "value": "#FFF7ED", "type": "color" },
      "500": { "value": "#F97316", "type": "color" }
    }
  }
}
```

#### 4.2.2 `semantic/color.json` (Aliases)

```jsonc
{
  "color": {
    "background": {
      "primary": { "value": "{brands.etus.primary}", "type": "color" },
      "surface": { "value": "{core.color.neutral.50}", "type": "color" }
    },
    "text": {
      "high":      { "value": "{core.color.neutral.900}", "type": "color" },
      "onPrimary": { "value": "{brands.etus.onPrimary}",  "type": "color" }
    },
    "feedback": {
      "success": { "value": "{core.color.green.500}", "type": "color" },
      "error":   { "value": "{core.color.red.500}",   "type": "color" }
    }
  }
}
```

*(Supondo que exista `core.color.red.500` definido em outro lugar.)*

#### 4.2.3 `components/button.json`

```jsonc
{
  "button": {
    "primary": {
      "background": { "value": "{semantic.color.background.primary}", "type": "color" },
      "text":       { "value": "{semantic.color.text.onPrimary}",     "type": "color" },
      "radius":     { "value": "{core.border.radius.md}",            "type": "dimension" }
    }
  }
}
```

#### 4.2.4 `themes/dark.json`

```jsonc
{
  "color": {
    "background": {
      "surface": { "value": "{core.color.neutral.900}", "type": "color" },
      "primary": { "value": "{core.color.green.600}",   "type": "color" }
    },
    "text": {
      "high": { "value": "{core.color.neutral.0}",      "type": "color" }
    }
  }
}
```

#### 4.2.5 `brands/etus.json`

```jsonc
{
  "primary":   { "value": "{core.color.green.500}", "type": "color" },
  "secondary": { "value": "{core.color.green.200}", "type": "color" },
  "onPrimary": { "value": "{core.color.neutral.0}", "type": "color" }
}
```

##### **(Aqui removemos duplicações. A ETUS usa cor principal = “green.500”, secundária = “green.200”.)**

---

## 5. Nomenclatura em CSS Custom Properties

### 5.1 Prefixos e Convenções

- **Primitives** (core) em CSS: `--core-color-neutral-50`, `--core-color-green-500`.  
- **Semânticos** em CSS: `--color-background-primary`, `--color-text-high`.  
- **Marcas**: `--etus-primary`, `--brius-primary`, etc.  
- **Componentes**: `--button-primary-bg`, `--button-primary-text` etc.

**Exemplo de Guia Rápido**:

- `--{core|brand|component}-{categoria}-{nome}-{variante}`
- `--color-{role}-{state}` (para semânticos).

### 5.2 Exemplos de Tema Dinâmico

**Global (semantic + core):**

```css
:root {
  --core-color-neutral-50: #F9FAFB;
  --core-color-green-500:  #22C55E;
  --color-background-primary: var(--etus-primary);
  --color-text-high: #111827;
}
```

**Override Marca (ETUS):**

```css
:root[data-brand="etus"] {
  --etus-primary: var(--core-color-green-500);
  --button-primary-bg: var(--etus-primary);
  --button-primary-text: var(--core-color-neutral-0);
}
```

**Override Marca (Brius):**

```css
:root[data-brand="brius"] {
  --brius-primary: var(--core-color-orange-500);
  --button-primary-bg: var(--brius-primary);
  --button-primary-text: var(--core-color-neutral-0);
}
```

**Override Tema Dark (exemplo simplificado):**

```css
:root.theme-dark {
  --color-background-primary: var(--core-color-green-600);
  --color-text-high: var(--core-color-neutral-0);
}
```

*(Poderíamos combinar `[data-brand="etus"].theme-dark` se quisermos marca + tema.)*

---

## 6. Nomenclatura em TypeScript

### 6.1 Enums e Mapped Types

Podemos criar um `enum` para representar cada **Brand**, e *mapped types* para derivar as chaves de tokens.

```ts
// brand.ts
export enum Brand {
  ETUS = 'etus',
  BRIUS = 'brius',
  EVOLUTION = 'evolution'
}

// types.ts
export type TokenValue = string | number | { [key: string]: any };

export type TokenMap<T> = {
  [K in keyof T]: { value: T[K] };
};
```

### 6.2 Módulos por Marca

Cada **pacote** de tokens (ETUS, Brius, etc.) exporta objetos com `as const`, garantindo autocomplete e tipagem imutável.

```ts
// tokens/brands/etus.ts
export const TOKENS_ETUS = {
  'primary':   { value: '#22C55E', type: 'color' },
  'secondary': { value: '#9AE6B4', type: 'color' },
  'onPrimary': { value: '#FFFFFF', type: 'color' }
} as const;
```

**Mesclagem**: Ao criar a build, podemos unir `TOKENS_GLOBAL` + `TOKENS_ETUS`.

```ts
import { TOKENS_GLOBAL } from '../global';
import { TOKENS_ETUS }   from './etus';

export const TOKENS_ETUS_FINAL = {
  ...TOKENS_GLOBAL,
  ...TOKENS_ETUS
};
```

### 6.3 Boas Práticas

- Usar **mesmos nomes** entre JSON, CSS e TS (ex.: `color.background.primary` → `--color-background-primary` → `tokensGlobal['color.background.primary']`).  
- Criar scripts para gerar automaticamente `.ts` a partir dos JSON, evitando **divergências** humanas.  
- Se cada marca for independente, manter `Brand.ETUS` etc. para escolher qual token importar.

---

## 7. Regras de “Faça e Não Faça”

### 7.1 Consistência de Marca e Estado

**Faça**:

- Manter um único padrão para nomes de cor e escala (ex.: `--etus-color-green-600`).  
- Usar `data-brand="etus"` (ou brius/evolution) e `.theme-dark` (ou `.theme-light`) para aplicar overrides.  

**Não faça**:

- Combinar “--brandAzul” num lugar e “--etus-color-blue-600” em outro.  
- Misturar português/inglês sem critério (ex.: `--cor-primaria` vs. `--primaryColor`).

### 7.2 Separação de Responsabilidades

**Faça**:

- Deixar tokens *globais* (ex.: `color.feedback.error`) em `semantic/` e tokens *marcas* em `brands/`.  
- Armazenar `componentes` em `components/`, definindo lá `button.primary.background`, etc.  

**Não faça**:

- **Duplicar** tokens de feedback para cada marca (ex.: `etus.color.feedback.error`, `brius.color.feedback.error`). O ideal é apontar `feedback.error` para cada cor primitiva no override.  
- Espalhar tokens semânticos nos arquivos de marca se eles forem conceitualmente globais.

### 7.3 Onboarding de Novas Marcas

**Faça**:

1. Criar `color.json` e `typography.json` no `brands/novamarca/` definindo as cores ou fontes primitivas dela.  
2. Criar override apontando `brand.primary` para a cor principal dessa nova marca.  
3. Ajustar a pipeline (ex.: Style Dictionary) para processar esse novo diretório e gerar a saída.  
4. Documentar a lógica para a equipe (ex.: “use [data-brand=‘nova’] no HTML”).  

**Não faça**:

- Hard-code valores de cor ou tipografia somente na pasta do componente. Isso mina a consistência do DS.  
- Ignorar a documentação do que muda em cada marca.

---

## 8. Exemplos Práticos de Implementação

### 8.1 Tailwind Config Dinâmico

```js
// buildTailwindConfig.js
const fs = require('fs');
const path = require('path');

// Ex.: Carrega tokens JSON da ETUS
const etusColors = require('./tokens/brands/etus.json');

// Ex.: Carrega tokens globais
const globalSemantic = require('./tokens/semantic/color.json').color;

function parseColors(brandColors) {
  // Exemplo de converter { "primary": { value: "#22C55E" }, ... } em { primary: "#22C55E", ... }
  const result = {};
  Object.keys(brandColors).forEach(key => {
    result[key] = brandColors[key].value;
  });
  return result;
}

const tailwindConfigEtus = {
  theme: {
    extend: {
      colors: {
        ...parseColors(etusColors)
      },
      // Outras configurações (spacing, borderRadius, etc.)
    }
  }
};

fs.writeFileSync(
  path.join(__dirname, 'tailwind.etus.config.js'),
  `module.exports = ${JSON.stringify(tailwindConfigEtus, null, 2)}`
);
```

Depois, para usar, `npx tailwindcss -c tailwind.etus.config.js ...` gera as classes de utilitários com as cores do ETUS.

### 8.2 Uso em Vue com SCSS

```scss
/* tokens.scss (gerado ou escrito manualmente) */

/* Globais */
:root {
  --core-color-green-500: #22C55E;
  --core-color-neutral-0:  #FFFFFF;
  --color-text-primary:    #111827;
}

/* Marca ETUS */
:root[data-brand="etus"] {
  --etus-color-primary:   var(--core-color-green-500);
  --etus-color-onPrimary: var(--core-color-neutral-0);

  --button-primary-bg:    var(--etus-color-primary);
  --button-primary-text:  var(--etus-color-onPrimary);
}

/* Marca Brius */
:root[data-brand="brius"] {
  --brius-color-primary:  var(--core-color-orange-500);
  --button-primary-bg:    var(--brius-color-primary);
  --button-primary-text:  var(--core-color-neutral-0);
}

/* Tema Dark (pode ou não misturar com brand) */
:root.theme-dark {
  --color-text-primary: var(--core-color-neutral-0);
  /* etc. */
}
```

No componente Vue:

```vue
<template>
  <button class="btn-primary">Clique aqui</button>
</template>

<style scoped lang="scss">
.btn-primary {
  background-color: var(--button-primary-bg);
  color: var(--button-primary-text);
  padding: 8px 16px;
  border-radius: 4px;
}
</style>
```

Ao alterar `<body data-brand="brius" class="theme-dark">`, aplicamos simultaneamente overrides de Brius + escuro.

---

## 9. Conclusão e Próximos Passos

Gerenciar múltiplas marcas (ETUS, Brius, Evolution e futuras) requer um **sistema de tokens** **bem estruturado**. Este documento propõe:

1. **Arquitetura D** para separar domínios (`core`, `semantic`, `components`, `themes`, `brands`).  
2. **Nomenclatura unificada** em JSON, CSS e TS, de modo que designers e devs usem o mesmo vocabulário (`etus.color.green-600`, `--button-primary-bg`, etc.).  
3. **Tokens semânticos** que evitam duplicações, com overrides pontuais para cada marca ou tema.  
4. Exemplos práticos de pipeline (Tailwind) e uso em Vue/SCSS para demonstrar como integrar no dia a dia.  

### Resumo das Recomendações

- **Centralize** tokens primitivos em `core/`, padronizando escalas de cor, tipografia, espaçamento, etc.  
- **Use** `semantic/` para papéis de design (ex.: `feedback.error`, `background.primary`) e **apenas** aponte para esses tokens primitivos — ou para `brands/` se a cor vier de uma marca específica.  
- **Separe** tokens de componentes em `components/` quando certos valores (como `button.primary.background`) forem realmente específicos de UI.  
- **Implemente** overrides para Light/Dark em `themes/`, trocando valores de `background.surface`, `text.high`, etc.  
- **Crie** um arquivo por marca em `brands/`, definindo `primary`, `secondary`, `onPrimary` etc. com referência aos tokens `core`.  
- **Automatize** a geração de CSS Variables, TypeScript e configurações de frameworks (Tailwind, etc.) para não haver divergência manual.  
- **Documente** claramente como adicionar uma nova marca: quais arquivos criar, como mapear cores, onde alterar o pipeline.  

### Próximos Passos

1. **Ajustar** o pipeline de build (ex.: Style Dictionary) para mesclar todos os arquivos `.json` e gerar as saídas (CSS, TS, SCSS).  
2. **Documentar** a abordagem de Light/Dark para cada marca, caso seja necessário suportar ambos simultaneamente.  
3. **Treinar** a equipe de design e desenvolvimento para saber onde criar tokens (primitives vs. semantic vs. brand) e como referenciá-los no código.  
4. **Monitorar** o processo de inclusão de novas marcas, refinando a estrutura se surgirem necessidades mais complexas (ex.: high-contrast, brand-in-brand, etc.).

---

## 10. Referências

- **Style Dictionary**: [https://amzn.github.io/style-dictionary](https://amzn.github.io/style-dictionary)  
- **Tailwind CSS**: [https://tailwindcss.com/docs](https://tailwindcss.com/docs)  
- **Material Design (M3)**: [https://m3.material.io](https://m3.material.io)  
- **Radix UI Colors**: [https://www.radix-ui.com/docs/colors](https://www.radix-ui.com/docs/colors)  
- **Shopify Polaris**: [https://polaris.shopify.com](https://polaris.shopify.com)  
- **Atlassian Design System**: [https://atlassian.design](https://atlassian.design)  
- **IBM Carbon**: [https://carbondesignsystem.com](https://carbondesignsystem.com)  
- **Salesforce Lightning DS**: [https://www.lightningdesignsystem.com](https://www.lightningdesignsystem.com)  
- **Adobe Spectrum**: [https://spectrum.adobe.com](https://spectrum.adobe.com)  
- **GitHub Primer**: [https://primer.style](https://primer.style)  
- **Base Web (Uber)**: [https://baseweb.design](https://baseweb.design)
```
    </guia>
    <paragraph>Embora `core` seja global, a seleção de primitivos (especialmente cores e tipografia) deve ser informada pelo contexto multimarca (ETUS, Brius, Evolution) para garantir que a base suporte as necessidades de todas as marcas.</paragraph>
  </section>

  <section title="4) Estrutura Desejada do PRD (Output Markdown)">
    <paragraph>O documento Markdown final deve seguir esta estrutura:</paragraph>
    <list numbered="true">
      <item><bold>Introdução:</bold>
          <sublist>
            <item>Propósito do PRD (definir a base `core` do Design System).</item>
            <item>Escopo (listar as 12 categorias cobertas).</item>
            <item>Importância dos tokens `core` para consistência e escalabilidade.</item>
          </sublist>
      </item>
      <item><bold>Princípios da Camada Core:</bold>
          <sublist>
            <item>Breve explicação da camada `core` na Arquitetura D.</item>
            <item>Princípios de Nomenclatura (literal vs. semântica).</item>
            <item>Abordagem para Escalas (numérica, T-shirt, etc.).</item>
          </sublist>
      </item>
      <item><bold>Definição dos Tokens Core (por Categoria):</bold>
          <sublist>
            <item>Criar uma subseção (e.g., `## 3.1 Colors`, `## 3.2 Typography`, ...) para CADA uma das 12 categorias listadas na Seção 1.</item>
            <item>Dentro de cada subseção de categoria:
                <sublist>
                    <item>Propósito da categoria como primitiva.</item>
                    <item>Estrutura e Escala Proposta (e.g., paleta 50-950, escala de espaçamento base 8px, lista de pesos de fonte).</item>
                    <item>Convenção de Nomenclatura Específica (e.g., `core.color.[hue].[scale]`, `core.size.spacing.[scale]`).</item>
                    <item>Tabela/Lista de Tokens Propostos (com nome, valor, tipo e descrição breve). Onde a lista for muito longa (cores), mostrar exemplos representativos.</item>
                    <item>Justificativa para as escolhas (e.g., por que essa escala, por que esses breakpoints).</item>
                    <item>Breves considerações de acessibilidade relevantes (e.g., comentar sobre contraste ao definir paletas de cores, legibilidade para tipografia).</item>
                </sublist>
            </item>
          </sublist>
      </item>
      <item><bold>Exemplo de Implementação (Estrutura JSON Core):</bold>
          <sublist>
            <item>Apresentar um snippet de código JSON demonstrando como múltiplas categorias (`color`, `spacing`, `typography`, etc.) seriam estruturadas dentro da camada `core`.</item>
            <item>Mostrar exemplos de nomes de token, valores, tipos (`color`, `dimension`, `fontWeight`, etc.) e descrições.</item>
          </sublist>
      </item>
      <item><bold>Próximos Passos e Relação com Outras Camadas:</bold>
          <sublist>
            <item>Mencionar brevemente como esses tokens `core` serão referenciados pelas camadas `semantic`, `brands`, e `components`.</item>
          </sublist>
      </item>
    </list>
  </section>

  <section title="5) Critérios de Qualidade do PRD">
    <list>
      <item>Clareza e Justificativa: Todas as propostas de escalas, valores e nomes devem ser claramente explicadas e justificadas.</item>
      <item>Consistência: A nomenclatura e estrutura devem ser consistentes em todas as 12 categorias dentro da camada `core`.</item>
      <item>Completude: Todas as 12 categorias listadas devem ser abordadas com o detalhe especificado.</item>
      <item>Praticidade: As escalas e valores propostos devem ser práticos e baseados em boas práticas (e.g., escalas de espaçamento baseadas em 4/8px, escalas de cores perceptualmente uniformes se possível).</item>
      <item>Acessibilidade: Incluir notas de acessibilidade pertinentes para cada categoria relevante.</item>
      <item>Formato: O output deve ser um documento Markdown bem formatado, usando headings (`#`, `##`, `###`), listas e tabelas onde apropriado.</item>
      <item>JSON Válido: O snippet JSON na seção de implementação deve ser válido e refletir corretamente a estrutura proposta.</item>
       <item>Volume: Mantenha o documento focado e objetivo. Não há um limite estrito de palavras, mas evite redundâncias. Priorize a informação essencial para definir os tokens `core`.</item>
    </list>
  </section>

</prompt-tokens>